{
  "version": 3,
  "sources": [
    "/demo/demo.js"
  ],
  "names": [
    "port",
    "process",
    "env",
    "DEMO_PORT",
    "undefined",
    "usesAuthentication",
    "DEMO_AUTHENTICATION",
    "parseInt",
    "authenticationStrategies",
    "name",
    "validate",
    "request",
    "username",
    "password",
    "callback",
    "isValid",
    "id",
    "config",
    "api",
    "version",
    "hasDocumentation",
    "routes",
    "method",
    "path",
    "handler",
    "reply",
    "hello",
    "description",
    "Promise",
    "resolve",
    "Error",
    "timeout",
    "server",
    "connections",
    "push",
    "auth",
    "exposedRoutes",
    "forEach",
    "route",
    "then",
    "start",
    "console",
    "log"
  ],
  "mappings": "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",
  "file": "/demo/demo.js",
  "sourcesContent": [
    "import initServer from '../init-server'\nconst port = process.env.DEMO_PORT === undefined ? 8080 : process.env.DEMO_PORT\nconst usesAuthentication = process.env.DEMO_AUTHENTICATION === undefined ? false : 1 === parseInt(process.env.DEMO_AUTHENTICATION, 10)\n\nlet authenticationStrategies\n\nif (usesAuthentication) {\n  authenticationStrategies = [\n    {\n      name: 'simple',\n      validate: function (request, username, password, callback) {\n        const isValid = username === 'hello' && password === 'world'\n\n        return callback(null, isValid, { id: 42 })\n      }\n    }\n  ]\n} else {\n  authenticationStrategies = []\n}\n\nconst config = {\n  api: {\n    name: 'Demo server',\n    version: '1',\n    hasDocumentation: true,\n    routes: [\n      {\n        method: 'GET',\n        path:'/hello-world',\n        handler: (request, reply) => {\n          reply({\n            hello: 'world'\n          })\n        },\n        config: {\n          description: 'Hello world'\n        }\n      },\n      {\n        method: 'GET',\n        path:'/hello-world-promise',\n        handler: (request, reply) => {\n          reply(new Promise((resolve) => {\n            return resolve({\n              hello: 'world'\n            })\n          }))\n        },\n        config: {\n          description: 'Hello world using promise'\n        }\n      },\n      {\n        method: 'GET',\n        path:'/internal-server-error',\n        handler: function () {\n          throw new Error('err')\n        },\n        config: {\n          description: 'Internal server error'\n        }\n      },\n      {\n        method: 'GET',\n        path:'/internal-server-error-not-obj',\n        handler: function () {\n          throw 'err'\n        },\n        config: {\n          description: 'Internal server error with non object'\n        }\n      },\n      {\n        method: 'GET',\n        path:'/promise-unhandled-rejection',\n        handler: function (request, reply) {\n          reply(new Promise(() => {\n            throw new Error('err')\n          }))\n        },\n        config: {\n          description: 'Promise with unhandled rejection'\n        }\n      },\n      {\n        method: 'GET',\n        path:'/promise-unhandled-rejection-not-obj',\n        handler: function (request, reply) {\n          reply(new Promise(() => {\n            throw 'err'\n          }))\n        },\n        config: {\n          description: 'Promise with unhandled rejection with non object'\n        }\n      },\n      {\n        method: 'GET',\n        path:'/timeout',\n        handler: function () {\n          //Do nothing and wait for timeout\n        },\n        config: {\n          timeout: {\n            server: 200\n          },\n          description: 'Timeout'\n        }\n      }\n    ],\n    usesAuthentication,\n    authenticationStrategies\n  },\n  server: {\n    connections: [\n      {\n        port: port\n      }\n    ]\n  }\n}\n\nif (usesAuthentication) {\n  config.api.routes.push({\n    method: 'GET',\n    path:'/hello-world-protected',\n    handler: (request, reply) => {\n      reply({\n        hello: 'world'\n      })\n    },\n    config: {\n      auth: 'simple',\n      description: 'Hello world with authentication'\n    }\n  })\n}\n\nconst exposedRoutes = [];\n\nconfig.api.routes.forEach((route) => {\n  exposedRoutes.push({\n    path: 'http://localhost:8080' + route.path,\n    description: route.config.description\n  })\n})\n\nconfig.api.routes.push({\n  method: 'GET',\n  path:'/',\n  handler: (request, reply) => {\n    reply(exposedRoutes)\n  },\n  config: {\n    description: 'Exposed routes'\n  }\n})\n\ninitServer(config).then((server) => {\n  server.start(() => {\n    console.log(`Server started, listening on port ${port} ${usesAuthentication ? 'with authentication': ''}`)\n  })\n})\n"
  ]
}
